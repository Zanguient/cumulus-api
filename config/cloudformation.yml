TemplateBody:
  AWSTemplateFormatVersion: '2010-09-09'
  Description: The AWS CloudFormation template for cumulus-api
  Parameters:
    ConfigS3Bucket:
      Type: String
      Description: S3 bucket that holds deployment artifacts
    ArtifactPath:
      Type: String
      Description: Path within the deployment bucket containing artifacts
  Outputs:
    # get Lambda's ARNs as output
    signupFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - signupFunction
        - Arn
    signinFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - signinFunction
        - Arn
    statsSummaryFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - statsSummaryFunction
        - Arn
    statsSummaryGroupedFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - statsSummaryGroupedFunction
        - Arn
    getErrorCountsFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - getErrorCountsFunction
        - Arn
    listErrorsFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - listErrorsFunction
        - Arn
    listGranulesFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - listGranulesFunction
        - Arn
    getGranulesFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - getGranulesFunction
        - Arn
    listCollectionsFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - listCollectionsFunction
        - Arn
    getCollectionFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - getCollectionFunction
        - Arn
    postCollectionFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - postCollectionFunction
        - Arn
    putCollectionFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - putCollectionFunction
        - Arn
    triggerFunctionArn:
      Description: Lambda function info
      Value:
        Fn::GetAtt:
        - triggerFunction
        - Arn

  Resources:

    TaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: TaskExecutionRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:

            # Allow Lambda logging
            - Effect: Allow
              Action:
              - logs:DescribeLogStreams
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*

            # Allow access to kinesis
            - Effect: Allow
              Action:
              - kinesis:GetRecords
              - kinesis:GetShardIterator
              - kinesis:DescribeStream
              - kinesis:ListStreams
              Resource:
              - "*"

            # Allow writing to ingest buckets
            - Effect: Allow
              Action:
              - s3:AbortMultipartUpload
              - s3:Get*
              - s3:Put*
              - s3:List*
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              Resource:
              - !Sub arn:aws:s3:::${ConfigS3Bucket}
              - !Sub arn:aws:s3:::${ConfigS3Bucket}/*
              - !Sub arn:aws:s3:::${StackName}-public
              - !Sub arn:aws:s3:::${StackName}-public/*
              - !Sub arn:aws:s3:::${StackName}-protected
              - !Sub arn:aws:s3:::${StackName}-protected/*
              - !Sub arn:aws:s3:::${StackName}-private
              - !Sub arn:aws:s3:::${StackName}-private/*

            # Allow managing network interfaces (required to run Lambda in VPC)
            - Effect: Allow
              Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              Resource:
              - "*"

            # Allow lambdas to call other lambdas
            - Effect: Allow
              Action:
              - lambda:GetFunction
              - lambda:invokeFunction
              Resource:
              - "*"

    ApiGatewayDeployment-cumulus-api-dev:
      DependsOn:
      - ApiGatewayMethodSignupPost
      - ApiGatewayMethodSigninPost
      - ApiGatewayMethodStatsSummaryGet
      - ApiGatewayMethodStatsSummaryGroupedGet
      - ApiGatewayMethodStatsErrorsGet
      - ApiGatewayMethodErrorsGet
      - ApiGatewayMethodGranulesCollectionVarGet
      - ApiGatewayMethodGranulesCollectionVarGranuleNameVarGet
      - ApiGatewayMethodCollectionsGet
      - ApiGatewayMethodCollectionsShortnameVarGet
      - ApiGatewayMethodCollectionsPost
      - ApiGatewayMethodCollectionsPut
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        StageName: dev
      Type: AWS::ApiGateway::Deployment

    ApiGatewayMethodSignupPost:
      Properties:
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - signupLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceSignup
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodSigninPost:
      Properties:
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - signinLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceSignin
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodStatsSummaryGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - statsSummaryLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceStatsSummary
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodStatsSummaryGroupedGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - statsSummaryGroupedLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceStatsSummaryGrouped
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodStatsErrorsGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - getErrorCountsLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceStatsErrors
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodErrorsGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - listErrorsLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceErrors
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodGranulesCollectionVarGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - listGranulesLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceGranulesCollectionVar
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodGranulesCollectionVarGranuleNameVarGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - getGranulesLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceGranulesCollectionVarGranuleNameVar
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodCollectionsGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - listCollectionsLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceCollections
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodCollectionsShortnameVarGet:
      Properties:
        HttpMethod: GET
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - getCollectionLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceCollectionsShortnameVar
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodCollectionsPost:
      Properties:
        HttpMethod: POST
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - postCollectionLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceCollections
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodCollectionsPut:
      Properties:
        HttpMethod: PUT
        Integration:
          IntegrationHttpMethod: POST
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates: {}
            StatusCode: 200
          - SelectionPattern: .*\[400\].*
            StatusCode: 400
          - SelectionPattern: .*\[401\].*
            StatusCode: 401
          - SelectionPattern: .*\[403\].*
            StatusCode: 403
          - SelectionPattern: .*\[404\].*
            StatusCode: 404
          - SelectionPattern: .*\[422\].*
            StatusCode: 422
          - SelectionPattern: .*(Process\s?exited\s?before\s?completing\s?request|Task\s?timed\s?out\s?|\[500\]).*
            StatusCode: 500
          - SelectionPattern: .*\[502\].*
            StatusCode: 502
          - SelectionPattern: .*\[504\].*
            StatusCode: 504
          PassthroughBehavior: NEVER
          RequestTemplates:
            application/json: "\n            #define( $loop )\n              {\n \
              \             #foreach($key in $map.keySet())\n                  \"\
              $util.escapeJavaScript($key)\":\n                    \"$util.escapeJavaScript($map.get($key))\"\
              \n                    #if( $foreach.hasNext ) , #end\n             \
              \ #end\n              }\n            #end\n\n            {\n       \
              \       \"body\": $input.json(\"$\"),\n              \"method\": \"\
              $context.httpMethod\",\n              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
            application/x-www-form-urlencoded: "\n            #define( $body )\n \
              \             {\n              #foreach( $token in $input.path('$').split('&')\
              \ )\n                #set( $keyVal = $token.split('=') )\n         \
              \       #set( $keyValSize = $keyVal.size() )\n                #if( $keyValSize\
              \ >= 1 )\n                  #set( $key = $util.urlDecode($keyVal[0])\
              \ )\n                  #if( $keyValSize >= 2 )\n                   \
              \ #set( $val = $util.urlDecode($keyVal[1]) )\n                  #else\n\
              \                    #set( $val = '' )\n                  #end\n   \
              \               \"$key\": \"$val\"#if($foreach.hasNext),#end\n     \
              \           #end\n              #end\n              }\n            #end\n\
              \n            #define( $loop )\n              {\n              #foreach($key\
              \ in $map.keySet())\n                  \"$util.escapeJavaScript($key)\"\
              :\n                    \"$util.escapeJavaScript($map.get($key))\"\n\
              \                    #if( $foreach.hasNext ) , #end\n              #end\n\
              \              }\n            #end\n\n            {\n              \"\
              body\": $body,\n              \"method\": \"$context.httpMethod\",\n\
              \              \"principalId\": \"$context.authorizer.principalId\"\
              ,\n              \"stage\": \"$context.stage\",\n\n              \"\
              cognitoPoolClaims\" : {\n                \n                \"sub\":\
              \ \"$context.authorizer.claims.sub\"\n              },\n\n         \
              \     #set( $map = $input.params().header )\n              \"headers\"\
              : $loop,\n\n              #set( $map = $input.params().querystring )\n\
              \              \"query\": $loop,\n\n              #set( $map = $input.params().path\
              \ )\n              \"path\": $loop,\n\n              #set( $map = $context.identity\
              \ )\n              \"identity\": $loop,\n\n              #set( $map\
              \ = $stageVariables )\n              \"stageVariables\": $loop\n   \
              \         }\n          "
          Type: AWS
          Uri:
            Fn::Join:
            - ''
            - - 'arn:aws:apigateway:'
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                - putCollectionLambdaFunction
                - Arn
              - /invocations
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: method.response.header.Access-Control-Allow-Origin
          StatusCode: 200
        - StatusCode: 400
        - StatusCode: 401
        - StatusCode: 403
        - StatusCode: 404
        - StatusCode: 422
        - StatusCode: 500
        - StatusCode: 502
        - StatusCode: 504
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceCollections
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method

    ApiGatewayMethodSignupOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceSignup
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodSigninOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceSignin
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodStatsSummaryOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceStatsSummary
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodStatsSummaryGroupedOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceStatsSummaryGrouped
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodStatsErrorsOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceStatsErrors
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodErrorsOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceErrors
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodGranulesCollectionVarOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceGranulesCollectionVar
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodGranulesCollectionVarGranuleNameVarOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceGranulesCollectionVarGranuleNameVar
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodCollectionsOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceCollections
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method
    ApiGatewayMethodCollectionsShortnameVarOptions:
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,PUT,POST,GET'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
          RequestTemplates:
            application/json: '{statusCode:200}'
          Type: MOCK
        MethodResponses:
        - ResponseModels: {}
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
        RequestParameters: {}
        ResourceId:
          Ref: ApiGateWayResourceCollectionsShortnameVar
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Method

    ApiGateWayResourceSignup:
      Properties:
        ParentId:
          Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
        PathPart: 'signup'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceSignin:
      Properties:
        ParentId:
          Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
        PathPart: 'signin'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceStats:
      Properties:
        ParentId:
          Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
        PathPart: 'stats'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceStatsSummary:
      Properties:
        ParentId:
          Ref: ApiGateWayResourceStats
        PathPart: 'summary'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceStatsSummaryGrouped:
      Properties:
        ParentId:
          Ref: ApiGateWayResourceStatsSummary
        PathPart: 'grouped'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceStatsErrors:
      Properties:
        ParentId:
          Ref: ApiGateWayResourceStats
        PathPart: 'errors'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceErrors:
      Properties:
        ParentId:
          Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
        PathPart: 'errors'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceGranules:
      Properties:
        ParentId:
          Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
        PathPart: 'granules'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceGranulesCollectionVar:
      Properties:
        ParentId:
          Ref: ApiGateWayResourceGranules
        PathPart: '{collection}'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceGranulesCollectionVarGranuleNameVar:
      Properties:
        ParentId:
          Ref: ApiGateWayResourceGranulesCollectionVar
        PathPart: '{granuleName}'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceCollections:
      Properties:
        ParentId:
          Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
        PathPart: 'collections'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource
    ApiGateWayResourceCollectionsShortnameVar:
      Properties:
        ParentId:
          Ref: ApiGateWayResourceCollections
        PathPart: '{short_name}'
        RestApiId:
          Ref: ApiGatewayRestApi
      Type: AWS::ApiGateway::Resource

    ApiGatewayRestApi:
      Properties:
        Name: cumulus-api-dev
      Type: AWS::ApiGateway::RestApi

    signupLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/signup.zip
        FunctionName: cumulus-api-signup-dev
        Handler: handlers/auth.signup
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    signupLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - signupLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    signinLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/signin.zip
        FunctionName: cumulus-api-signin-dev
        Handler: handlers/auth.signin
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    signinLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - signinLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    statsSummaryLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/statsSummary.zip
        FunctionName: cumulus-api-statsSummary-dev
        Handler: handlers/stats.summary
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    statsSummaryLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - statsSummaryLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    statsSummaryGroupedLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/statsSummaryGrouped.zip
        FunctionName: cumulus-api-statsSummaryGrouped-dev
        Handler: handlers/stats.summaryGrouped
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    statsSummaryGroupedLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - statsSummaryGroupedLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    getErrorCountsLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/getErrorCounts.zip
        FunctionName: cumulus-api-getErrorCounts-dev
        Handler: handlers/errors.counts
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    getErrorCountsLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - getErrorCountsLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    listErrorsLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/listErrors.zip
        FunctionName: cumulus-api-listErrors-dev
        Handler: handlers/errors.list
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    listErrorsLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - listErrorsLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    listGranulesLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/listGranules.zip
        FunctionName: cumulus-api-listGranules-dev
        Handler: handlers/granules.list
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    listGranulesLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - listGranulesLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    getGranulesLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/getGranules.zip
        FunctionName: cumulus-api-getGranules-dev
        Handler: handlers/granules.get
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    getGranulesLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - getGranulesLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    listCollectionsLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/listCollections.zip
        FunctionName: cumulus-api-listCollections-dev
        Handler: handlers/collections.list
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    listCollectionsLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - listCollectionsLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    getCollectionLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/getCollection.zip
        FunctionName: cumulus-api-getCollection-dev
        Handler: handlers/collections.get
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    getCollectionLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - getCollectionLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    postCollectionLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/postCollection.zip
        FunctionName: cumulus-api-postCollection-dev
        Handler: handlers/collections.post
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    postCollectionLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - postCollectionLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    putCollectionLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/putCollection.zip
        FunctionName: cumulus-api-putCollection-dev
        Handler: handlers/collections.put
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
    putCollectionLambdaPermissionApiGateway:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Fn::GetAtt:
          - putCollectionLambdaFunction
          - Arn
        Principal: apigateway.amazonaws.com
      Type: AWS::Lambda::Permission
    triggerLambdaFunction:
      Properties:
        Code:
          S3Bucket: !Ref ConfigS3Bucket
          S3Key: !Sub ${ArtifactPath}/lambda/trigger.zip
        FunctionName: cumulus-api-trigger-dev
        Handler: handlers/triggers.trigger
        MemorySize: 1024
        Role:
          Fn::GetAtt:
          - TaskExecutionRole
          - Arn
        Runtime: nodejs4.3
        Timeout: 300
      Type: AWS::Lambda::Function
